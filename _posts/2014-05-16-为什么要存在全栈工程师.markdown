---
layout: post
title:  "为什么要存在全栈工程师"
date:   2014-05-16 18:00:00
categories: Docker
---

司徒正美出了一本书《JavaScript框架设计》，前几周快读了一遍。书中介绍，实现一个JS库或者框架，所会遇到的方方面面的问题。如选择器的设计，数据缓存，动画，各种JavaScript设计模式等等。书中有大量关于兼容性的解决方案，对于经常使用jQuery或者其他JS框架，而对底层接触甚少的人来说，读此书会有相当收获。

我们大部分前端都没有机会去写框架，当然，没机会不代表就不用去学习、观察。如果你喜欢某家公司，那么对方很可能会出一些笔试题给你，诸如：用原生去实现一个DOM.getByAttr()的方法，或写出jQuery选择器的工作原理。这些至少要了解。

有些技术终究会被遗忘，只存在于记忆中。比如IE6，我已经记不清上一次解决PNG-24不透明Bug是在什么时候，可能是两年前了吧。也很久没给新同事解释滑动门和选项卡的区别。CSS3的支持越来越广泛，扁平化风格的流行，在逐渐改变前端开发工程师的编码习惯。当可以大胆的使用border-radius的时候，还有谁会记得滑动门呢？

两年前我带了一个徒弟，缘由是公司在启动一项活动：让开发前端起来。现在想来，效果不理想，但也不是特别糟糕，我鼓励她用最标准的浏览器来学习。第一天我从MS Word讲起，说明结构、表现，行为是什么。文档流是什么现象，绝对定位、相对定位、浮动、内外补丁等概念。当时之所以流行“让开发前端起来”，就是为了让开发能脱离前端，独立完成一些业务。这应该是全栈工程师的雏形吧。

回到主题，什么叫全栈开发工程师呢？需要掌握哪些技能呢？要全部都学好吗？要懂很多设计模式吗？

我也不知道，不过尽管司徒正美在《JavaScript框架设计》中的序中说到：

```
如果写业务代码，你写十年，水平还是那样。因此有句话说——“用一年的经验混十年”,..."我能力强，我效率高，我应该是公司的关键人物"，其实那是错的，不可替代性才是最重要的。
```

很可悲的是，我就是一个主要负责业务代码的人。用到的seaJS、jQuery、Kissy、YUI、NodeJS、ExpressJS都不是我开发的。所以我算是一个：“可被替代的人”。

但是，前端的发展和学习，一直和业务分离不开。很难想象一个前端，用一年的工作经验能混3年，更别说10年了。2008年的时候，我正为自己写了一个，自适应高宽的圆角容器而开心。而如今，有哪个前端还会用这种偏门的方法呢，大都border-radius搞定了。3年前，大部门前端的主要矛盾还是浏览器的兼容性问题。而如今更要紧的是，怎么解决HTML5+CSS3在各种移动终端上的兼容性问题。

因此，一个前端，如果紧跟业务发展，急业务之所急，想业务之所想，那么也能成为一个：“不可替代的人”。

### 为什么要学习全栈

两点：一是好奇心驱使，二是业务或工作需要。这两种不是对立，而很可能是相辅相成的。

2011年我在淘宝做外包，他们的前端资源是放在CDN上的，使用了COMBO技术。简单来讲，就说通过问号串联多个JS或CSS文件，合并为一个请求。有些时候，我希望在预发或线上环境，调试combo中的某个文件。

这可以称为一个需求：将线上某个文件，映射到本地，本地修改后，刷新网页即可验证。如果对此需求做分解，那么有以下几个步骤：

* 将CDN的请求指向到本地。
* 拆分COMBO请求，并逐个检查本地是否存在映射。
* 如果存在，则读取本地文件，否则抓取远程文件内容。

有了需求后，前端需要考虑用什么样的技术去实现。如果前端对PHP、Java、Python等语言都不太熟悉的话，那么Node.JS是唯一的选择，或者更好的选择。

对于公司来讲，做成了这个小工具，对公司利润影响不会太大。但对于个人来讲，一是能带来成就感，第二的确能提高前端开发效率。当然，从蝴蝶效应的理论出发，我们会相信他会给公司带来相当多的好处，尽管不太好量化。

从个人和公司的视角分别来看，学技术大概有2个目的：

* 创造工具、研究底层
* 完成业务、产生利润

这是有交集的两个方向，例如，一个人在用工具完成业务的过程中，发现一个业界无法解决或解释的问题，那么他很可能去了解工具背后的原理，进而得到一个解决方案，回馈给工具开发者。而工具开发者，在了解到业务的需求后，而开发出更多的工具来让业务实现者用的更舒服。

这是相辅相成的。一个人的知识储备，和年龄的增长、业务的发展是成正比的。前端曾经为了兼容性问题而存在，而如今，HTML5+CSS3的兼容性、移动设备的性能优化，成为主流研究方向。

更重要的是，前端能在缺乏后端的支持下，独立将一些想法，转换为一些实实在在在的产品吗？如果是，那么前端要学习的就有很多了。

围绕着“将想法转换为实实在在的产品”这个目标，至少就产生了如下问题：

* 用什么语言来完成后端业务？Java？PHP？NodeJS？
* 如何判断UA并发送不同的响应？该使用媒体查询吗？
* 如何配合DBA做数据存储？
* 发布上线前如何进行性能测试、优化？
* 如何实现灰度发布？
* 出现问题如何快速回滚？
* 如何保证稳定性？如何监控？

我想，这才是全栈要去了解、做的事情。简单来说，前端工程师产出DEMO，全栈工程师产出产品。
